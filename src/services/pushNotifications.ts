//Core React Native Modules
import { Platform } from "react-native";

//3rd Party Libraries
const PushNotification = require("react-native-push-notification");
import PushNotificationIOS from "@react-native-community/push-notification-ios";
import moment from "moment";

//Functions
import { getTask } from "../controllers/database/Tasks/getTask";

//Utilities
import { theWeekNumericalValues } from "../utilities/theWeekNumericalValues";

const configure = async () => {
  PushNotification.configure({
    onRegister: function (token) {
      //process token
    },

    onNotification: function (notification) {
      console.log("NOTIFICATION:", notification);
      // process the notification
      // required on iOS only
      notification.finish(PushNotificationIOS.FetchResult.NoData);
    },

    permissions: {
      alert: true,
      badge: true,
      sound: true,
    },

    popInitialNotification: true,
    requestPermissions: Platform.OS === "ios",
  });
};

const testLocalNotifications = () => {
  PushNotification.localNotification({
    title: "Title Test",
    message: "Message Test",
  });
};

const addAWeeklyRepeatingLocalNotification = async (taskId: number) => {
  const task = await getTask(taskId);
  const currentDayComparator = moment().isoWeekday();
  console.log("current day: ", currentDayComparator);
  console.log(task);
  const taskDayComparator = theWeekNumericalValues[task.day];
  console.log("task day: ", taskDayComparator);

  if (currentDayComparator > taskDayComparator) {
    PushNotification.localNotificationSchedule({
      /* Android Only Properties */
      id: task.id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      ticker: "My Notification Ticker", // (optional)
      showWhen: true, // (optional) default: true
      autoCancel: true, // (optional) default: true
      largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
      largeIconUrl: undefined, // (optional) default: undefined
      smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: task.text, // (optional) default: "message" prop
      subText: "", // (optional) default: none
      bigPictureUrl: undefined, // (optional) default: undefined
      color: "red", // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      ongoing: false, // (optional) set whether this is an "ongoing" notification
      priority: "high", // (optional) set notification priority, default: high
      visibility: "private", // (optional) set notification visibility, default: private
      importance: "high", // (optional) set notification importance, default: high
      allowWhileIdle: true, // (optional) set notification to work while on doze, default: false
      ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear)
      onlyAlertOnce: false, //(optional) alert will open only once with sound and notify, default: false
      actions: '["Yes", "No"]', // (Android only) See the doc for notification actions to know more
      invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true

      /* iOS only properties */
      alertAction: "view", // (optional) default: view
      category: "", // (optional) default: empty string
      userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)

      /* iOS and Android properties */
      title: task.day + " Task", // (optional)
      message: task.text, // (required)
      date: moment()
        .startOf("week")
        .add(1, "week")
        .add(taskDayComparator, "days")
        .add(task.reminderTimeValue, "hours")
        .toDate(), // (required)
      playSound: true, // (optional) default: true
      soundName: "default", // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      //repeatType: "week", // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
    });
  } else if (currentDayComparator <= taskDayComparator) {
    PushNotification.localNotificationSchedule({
      /* Android Only Properties */
      id: task.id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      ticker: "My Notification Ticker", // (optional)
      showWhen: true, // (optional) default: true
      autoCancel: true, // (optional) default: true
      largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
      largeIconUrl: undefined, // (optional) default: undefined
      smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: task.text, // (optional) default: "message" prop
      subText: "", // (optional) default: none
      bigPictureUrl: undefined, // (optional) default: undefined
      color: "red", // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      ongoing: false, // (optional) set whether this is an "ongoing" notification
      priority: "high", // (optional) set notification priority, default: high
      visibility: "private", // (optional) set notification visibility, default: private
      importance: "high", // (optional) set notification importance, default: high
      allowWhileIdle: true, // (optional) set notification to work while on doze, default: false
      ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear)
      onlyAlertOnce: false, //(optional) alert will open only once with sound and notify, default: false
      actions: '["Yes", "No"]', // (Android only) See the doc for notification actions to know more
      invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true

      /* iOS only properties */
      alertAction: "view", // (optional) default: view
      category: "", // (optional) default: empty string
      userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)

      /* iOS and Android properties */
      title: task.day + " Task", // (optional)
      message: task.text, // (required)
      date: moment()
        .startOf("isoWeek")
        .add(taskDayComparator, "days")
        .add(task.reminderTimeValue, "hours")
        .toDate(), // (required)
      playSound: true, // (optional) default: true
      soundName: "default", // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      //repeatType: "week", // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
    });
  }
  console.log("3");
};

const removeALocalScheduledNotification = (taskId: number) => {
  PushNotification.cancelLocalNotifications({ id: taskId.toString() });
};

const removeAllLocalNotifications = () => {
  PushNotification.cancelAllLocalNotifications();
};

export {
  configure,
  testLocalNotifications,
  addAWeeklyRepeatingLocalNotification,
  removeALocalScheduledNotification,
  removeAllLocalNotifications,
};
